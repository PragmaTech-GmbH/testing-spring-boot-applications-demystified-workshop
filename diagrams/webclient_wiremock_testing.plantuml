@startuml WebClient and WireMock Testing

!define APP_COLOR #C8E6C9
!define WIREMOCK_COLOR #FFECB3
!define TEST_COLOR #BBDEFB
!define EXTERNAL_COLOR #FFCDD2

skinparam rectangle {
    BackgroundColor white
    BorderColor #455A64
    FontColor #000000
}

skinparam component {
    BackgroundColor white
    BorderColor #455A64
    FontColor #000000
}

rectangle "Test Environment" {
    rectangle "JUnit Test" as TestClass #TEST_COLOR {
        component "@SpringBootTest" as TestAnnotation #TEST_COLOR
        component "WireMockExtension" as WireMockExt #TEST_COLOR
    }
    
    rectangle "Spring Boot Application" as SpringApp #APP_COLOR {
        component "Service Using WebClient" as Service #APP_COLOR {
            component "WebClient" as WebClient #APP_COLOR
        }
        component "Configuration" as Config #APP_COLOR
    }
    
    rectangle "WireMock Server" as WireMock #WIREMOCK_COLOR {
        component "Mock Endpoints" as MockEndpoints #WIREMOCK_COLOR
        component "Request Matchers" as RequestMatchers #WIREMOCK_COLOR
        component "Response Stubs" as ResponseStubs #WIREMOCK_COLOR
        component "Verification" as Verification #WIREMOCK_COLOR
    }
    
    rectangle "Real External Service (Replaced)" as ExternalService #EXTERNAL_COLOR [
        External Book API
        (Not used in tests)
    ]
}

' Connections in normal operation
ExternalService --> SpringApp: "Real requests (production)"

' Connections in test
TestClass --> SpringApp: "Initiates test"
TestClass --> WireMock: "Configures stubs"
WireMockExt --> WireMock: "Controls"
Config --> WebClient: "Configures URL"
WebClient --> WireMock: "Mock HTTP requests"
WireMock --> WebClient: "Mock responses"
TestClass --> WireMock: "Verifies requests"

note bottom of WireMock
  WireMock capabilities:
  - Stub HTTP responses
  - Match requests by URL, headers, body
  - Return different status codes
  - Simulate delays and errors
  - Verify request counts and patterns
end note

note bottom of TestClass
  Testing approach:
  1. Start WireMock server
  2. Configure mock responses
  3. Execute service code using WebClient
  4. Verify expected behavior
  5. Optionally verify request patterns
end note

note right of WebClient
  WebClient is configured to use
  WireMock server URL instead of
  real service URL during tests
end note

@enduml